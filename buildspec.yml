version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto11
      python: 3.8
    commands:
      - echo "Actualizando paquetes del sistema..."
      - yum update -y

      - echo "Instalando dependencias necesarias..."
      - yum install -y wget unzip nc

      - echo "Configurando variables de entorno para Android SDK..."
      - export ANDROID_HOME=$CODEBUILD_SRC_DIR/android-sdk
      - export PATH=$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH

      - echo "Descargando Command Line Tools de Android..."
      - mkdir -p $ANDROID_HOME/cmdline-tools
      - cd $ANDROID_HOME/cmdline-tools
      - wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
      - unzip cmdline-tools.zip -d latest
      - rm cmdline-tools.zip

      - echo "Aceptando licencias y descargando componentes del SDK..."
      - yes | sdkmanager --licenses
      - sdkmanager "platform-tools" "platforms;android-29" "emulator" "system-images;android-29;google_apis;x86_64" "build-tools;29.0.3"

  pre_build:
    commands:
      - echo "Creando AVD (Android Virtual Device)..."
      - echo "no" | avdmanager create avd -n testAVD -k "system-images;android-29;google_apis;x86_64" -d "pixel_2" --force

      - echo "Iniciando emulador en segundo plano..."
      - nohup emulator -avd testAVD -no-window -no-audio -accel off -gpu swiftshader_indirect -no-boot-anim -writable-system -no-snapshot > emulator.log 2>&1 &

      - echo "Esperando que el emulador inicie completamente..."
      - |
        TIMEOUT=300
        TIME_ELAPSED=0
        while [[ $(adb shell getprop sys.boot_completed | tr -d '\r') != "1" ]]; do
          sleep 5
          TIME_ELAPSED=$((TIME_ELAPSED + 5))
          if [ $TIME_ELAPSED -ge $TIMEOUT ]; then
            echo "❌ Timeout: El emulador no completó el arranque en $TIMEOUT segundos."
            exit 1
          fi
        done
        echo "✅ Emulador listo para ejecutar pruebas."

  build:
    commands:
      - echo "Instalando dependencias de prueba..."
      - pip install robotframework robotframework-appiumlibrary Appium-Python-Client

      - echo "Instalando Appium y el driver UiAutomator2..."
      - npm install -g appium@next
      - appium driver install uiautomator2

      - echo "Iniciando servidor de Appium..."
      - nohup appium --port 4724 --log appium.log > /dev/null 2>&1 &

      - echo "Esperando que Appium esté disponible..."
      - |
        for i in {1..30}; do
          if nc -z localhost 4724; then
            echo "✅ Appium está escuchando en el puerto 4724"
            break
          fi
          sleep 1
        done

      - echo "Ejecutando pruebas con Robot Framework..."
      - mkdir -p results
      - robot --loglevel TRACE --output results/output.xml tests/home.robot

  post_build:
    commands:
      - echo "Publicando resultados de las pruebas..."
artifacts:
  files:
    - results/output.xml
    - appium.log
    - emulator.log
